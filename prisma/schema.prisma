// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?        @unique
  hashedPassword String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  collegeId      String         @db.ObjectId
  college        College        @relation("UserToCollege", fields: [collegeId], references: [id])
  code           Int            @unique
  testProgresses TestProgress[] @relation("TestProgressToUser")
  assignments    Assignment[]   @relation("AssignmentToUser")
  registerNumber String?        @unique
}

model Learner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  majors    Major[]  @relation("MajorToLearner")
}

model Major {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  learnerId       String           @db.ObjectId
  learner         Learner          @relation("MajorToLearner", fields: [learnerId], references: [id])
  specializations Specialization[] @relation("SpecializationToMajor")
  src             String

  @@index([learnerId])
}

model Specialization {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  majorId    String     @db.ObjectId
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  major      Major      @relation("SpecializationToMajor", fields: [majorId], references: [id])
  categories Category[] @relation("SpecializationToCategory")

  @@index([majorId])
}

model Category {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  specializationId String         @db.ObjectId
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  specialization   Specialization @relation("SpecializationToCategory", fields: [specializationId], references: [id])
  topics           Topic[]        @relation("CategoryToTopic")
  src              String

  @@index([specializationId])
}

model Topic {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  categoryId  String       @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    Category     @relation("CategoryToTopic", fields: [categoryId], references: [id])
  subTopics   SubTopic[]   @relation("TopicToSubTopic")
  assignmenst Assignment[] @relation("TopicToAssignment")
  imgSrc      String?

  @@index([categoryId])
}

model SubTopic {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  testStartTime  DateTime?
  testEndTime    DateTime?
  topicId        String         @db.ObjectId
  topic          Topic          @relation("TopicToSubTopic", fields: [topicId], references: [id])
  testProgresses TestProgress[] @relation("TestProgressToSubTopic")

  questions Question[] @relation("SubTopicToQuestion")
  // assignments Assignment[] @relation("SubTopicToAssignment")
}

model College {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  users User[] @relation("UserToCollege")
}

model TestProgress {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  subTopicId        String    @db.ObjectId
  subTopic          SubTopic  @relation("TestProgressToSubTopic", fields: [subTopicId], references: [id])
  userId            String    @db.ObjectId
  user              User      @relation("TestProgressToUser", fields: [userId], references: [id])
  // startDate  DateTime?
  endDate           DateTime?
  attemptsRemaining Int       @default(0)
  completed         Boolean   @default(false)
  maxMarks          Int
  totalQuestions    Int

  @@index([userId])
  @@index([subTopicId])
}

model TestData {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  testProgressId String @db.ObjectId
  data           Json[] @default([])
}

model Question {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  question   String
  options    String[]
  ansIndex   String
  code       Boolean
  answer     String
  subTopicId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  subTopic   SubTopic @relation("SubTopicToQuestion", fields: [subTopicId], references: [id])

  @@index([subTopicId])
}

model Assignment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  topicId     String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  topic       Topic     @relation("TopicToAssignment", fields: [topicId], references: [id])
  startTime   DateTime?
  endTime     DateTime?
  description String
  completed   Boolean   @default(false)
  userId      String    @db.ObjectId
  user        User      @relation("AssignmentToUser", fields: [userId], references: [id])

  @@index([topicId])
  @@index([userId])
}
